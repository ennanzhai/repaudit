-----------------------------
1. Node Server(string x, string f)

The first input is a IP address, i.e., x, whose type is string. 
The second input is the DepDB, i.e., the IP path information file.
The function searches the input IP address, x, in the DepDB, 
and then returns a Node value. All the information such as name and failure
probability could be obtained from this value.

-----------------------------
2. Node Switch(string x, string f)

Exactly the same as the above function. Just different function name :) . 
The first input is a IP address, i.e., x, whose type is string. 
The second input is the DepDB, i.e., the IP path information file.
The function searches the input IP address, x, in the DepDB, 
and then returns a Node value. All the information such as name and failure
probability could be obtained from this value.

-----------------------------
3. FILE FaultGraph(vector<Node> x, string f)

This function generate a fault graph for a given replication deployment.

The first input parameter is a vector containing multiple Node variables. 
The vector in principle means a given replication deployment. Each element 
in this vector should be a replica server. 

The second input parameter is the path for DepDB, i.e., the IP path
information file.

After running this function, it should generate a CNF file. In fact, we
do not need to consider any weight so far. Thus, this CNF is a standard 
CNF.

In order to enable the following function, e.g., miniCostSAT, we may
need a shell command to transfer a CNF to WCNF, i.e., weighted CNF.
But this is quite straightforward.

In principle, we actually use CNF to represent a fault graph.

-----------------------------
4. vector<vector<Node>> RankRCG(FILE cnf, int k, string metric)

This function generates a list ranking the top k RCG in the given cnf
according to metric.

In this function, the input is a cnf, which should be transfered to a wcnf.

How to implement RankRCG() is still not easy. Let's see the following 
pseudo-code:

vector<vector<Node>> RankRCG(FILE cnf, int k, string metric):
  vector<vector<Node>> n;
  
  if metric = SIZE then: // rank RCGs based on sizes
    generate wcnf and weights are 1;
  else if metric = FailProb: // rank RCGs based on failure probabilities
    generate wcnf and weights are generated based on failure probability
  
  for i = 1 to k:
    vector<Node> r <- miniCostSAT(wcnf);
    n.append(r);
    r <- negation(r);
    wcnf.append(r)
    
  return n;  

-----------------------------
5. double FailProb(FILE cnf)

This function computes failure probability for the given cnf.

The easiest way I want to implement this function is to use RankRCG().
For instance, we run RankRCG(cnf, 5, SIZE), thus getting a list of risk
groups, per group corresponding to several nodes.

We could use the following way to compute the failure probability:
Pr(S1) + ... + Pr(S10) - Pr(S1) * Pr(S2) - ... - Pr(S9) * Pr(S10) +
  Pr(S1) * Pr(S2) * Pr(S3) + ... + Pr(S8) * Pr(S9) * Pr(S10) - ...

However, it seems the above way is not fast. Thus, we still need to drop
some accuracy. I am planning to use Pr(S1) + ... + Pr(S10) to fast 
obtain failure probability.

Alternatively, I proposed another way using SAT model counter, but it seems
that solution is also not fast. Let me think whether we really need the
SAT model counter-based approach.

-----------------------------
6. vector<Node> RankNode(FILE cnf, string metric)

This function generates a relative importance value for each node.

- Initially, we assume we already have RankRCG() and FailPro()
- First, we use RankRCG() to get top-10 RCGs, and compute the failure
  probability of the given replication.
- Then, we want to compute the relative importance of all the elements that
  appear in these 10 RCGs.

  * We compute the relative importance of any given element x by:
    Sum(Pr(RCG_i))/Pr(cnf)

  * Pr(RCG_i) means the probability of the RCG containing x;
    The probability of a RCG is to multiply all its elements' probabilities;
    Sum() means we need to plus all the x-contained RCGs' probabilities;
    Pr(cnf) means the failure probability of the whole replication 
    deployment. 

-----------------------------
7. FILE AddPath(FILE cnf, string path)

Easy

-----------------------------
8. FILE DelPath(FILE cnf, string path)

Easy

-----------------------------
9. FILE KillNode(FILE cnf, string id)

Easy

-----------------------------
10. vector<Node> OverlapPath(string path1, string path2)

Easy

-----------------------------
11. vector<vector<Node>> RecRep(vector<Node> sList,
                                string f, 
                                int num_replica) 


